generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Team {
  id        Int        @id @default(autoincrement())
  name      String?
  users     TeamUser[]
  Category  Category[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  Tag       Tag[]
}

model User {
  id           Int        @id @default(autoincrement())
  name         String?
  email        String     @unique
  accessToken  String
  idToken      String
  refreshToken String
  tokenExpiry  DateTime
  picture      String?
  teams        TeamUser[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
}

model TeamUser {
  id           Int       @id @default(autoincrement())
  teamId       Int
  userId       Int
  team         Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Ledger[]
  sources      Source[]
  habits       Habit[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([teamId, userId])
}

model Ledger {
  id                     Int              @id @default(autoincrement())
  date                   DateTime
  teamUserId             Int
  teamUser               TeamUser         @relation(fields: [teamUserId], references: [id])
  emailSubject           String?
  body                   String?
  amountExtract          Decimal?         @db.Decimal(10, 2)
  currency               String           @default("INR")
  payeeExtract           String?
  categoryId             Int?
  category               Category?        @relation(fields: [categoryId], references: [id])
  transactionTypeExtract TransactionType?
  emailId                String?          @unique
  sourceId               Int
  tags                   TagsOnLedgers[]
  source                 Source           @relation(fields: [sourceId], references: [id])
  status                 LedgerStatus     @default(CREATED)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime?        @updatedAt
}

model Source {
  id                Int              @id @default(autoincrement())
  sourceName        String
  sourceType        SourceType       @default(MAIL)
  query             String?
  teamUser          TeamUser         @relation(fields: [teamUserId], references: [id])
  teamUserId        Int
  amountRegex       String?
  amountRegexBackup String?
  payeeRegex        String?
  payeeRegexBackup  String?
  categoryId        Int?
  defaultCategory   Category?        @relation(fields: [categoryId], references: [id])
  defaultType       TransactionType?
  status            Status           @default(CREATED)
  rulePriority      Int              @default(0)
  extracts          Ledger[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @updatedAt
}

enum SourceType {
  MAIL
  API
}

enum LedgerStatus {
  CREATED
  IGNORE
  EXTRACTED
  JUNK
  MANUAL
  DUPLICATE
}

enum Status {
  ACTIVE
  CREATED
  INACTIVE
}

model Tag {
  id            Int             @id @default(autoincrement())
  tag           String
  teamId        Int
  colorCode     String?
  team          Team            @relation(fields: [teamId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  TagsOnLedgers TagsOnLedgers[]

  @@unique([teamId, tag])
}

model TagsOnLedgers {
  ledgerId   Int
  tagId      Int
  assignedAt DateTime @default(now())
  ledger     Ledger   @relation(fields: [ledgerId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([ledgerId, tagId])
}

model Category {
  id            Int        @id @default(autoincrement())
  categoryName  String
  teamId        Int
  isDontTrack   Boolean    @default(false)
  isInvestment  Boolean    @default(false)
  colorCode     String?
  team          Team       @relation(fields: [teamId], references: [id])
  ledgers       Ledger[]
  sources       Source[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  parentId      Int?
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")

  @@unique([teamId, categoryName])
}

enum TransactionType {
  EXPENSE
  INCOME
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}

model Habit {
  id                Int        @id @default(autoincrement())
  name              String
  description       String?
  color             String?
  frequency         Frequency  @default(DAILY)
  frequencyInterval Int        @default(1)
  goal              String
  teamUserId        Int
  teamUser          TeamUser   @relation(fields: [teamUserId], references: [id], onDelete: Cascade)
  logs              HabitLog[]
  startDate         DateTime   @default(now()) @db.Date
  endDate           DateTime?  @db.Date
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  completed         Boolean    @default(true)
  value             Float?
}

model HabitLog {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  completed Boolean  @default(true)
  notes     String?
  habitId   Int
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
}
