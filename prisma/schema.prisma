generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id        Int        @id @default(autoincrement())
  name      String?
  users     TeamUser[] // Many-to-many relationship via TeamUser
  Category  Category[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model User {
  id           Int        @id @default(autoincrement())
  name         String?
  email        String     @unique
  accessToken  String
  idToken      String
  refreshToken String
  tokenExpiry  DateTime
  picture      String?
  teams        TeamUser[] // Many-to-many relationship via TeamUser
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
}

model TeamUser {
  id           Int       @id @default(autoincrement())
  teamId       Int
  userId       Int
  team         Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Ledger[]
  sources      Source[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([teamId, userId]) // Ensures a user can't join the same team twice
}

model Ledger {
  id                     Int              @id @default(autoincrement())
  date                   DateTime
  userId                 Int
  user                   TeamUser         @relation(fields: [userId], references: [id])
  emailSubject           String?
  body                   String?
  amountExtract          Float?
  payeeExtract           String?
  categoryId             Int?
  category               Category?        @relation(fields: [categoryId], references: [id])
  transactionTypeExtract TransactionType?
  emailId                String?          @unique
  sourceId               Int
  source                 Source           @relation(fields: [sourceId], references: [id])
  status                 LedgerStatus     @default(CREATED)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime?        @updatedAt
}

model Source {
  id                Int              @id @default(autoincrement())
  sourceName        String
  sourceType        SourceType       @default(MAIL)
  query             String?
  user              TeamUser         @relation(fields: [userId], references: [id])
  userId            Int
  amountRegex       String?
  amountRegexBackup String?
  payeeRegex        String?
  payeeRegexBackup  String?
  categoryId        Int?
  defaultCategory   Category?        @relation(fields: [categoryId], references: [id])
  defaultType       TransactionType?
  status            Status           @default(CREATED)
  rulePriority      Int              @default(0)
  extracts          Ledger[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @updatedAt
}

enum SourceType {
  MAIL
  API
}

enum LedgerStatus {
  CREATED
  IGNORE
  EXTRACTED
}

enum Status {
  ACTIVE
  CREATED
  INACTIVE
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  teamId       Int
  team         Team      @relation(fields: [teamId], references: [id])
  ledgers      Ledger[]
  sources      Source[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

enum TransactionType {
  EXPENSE
  INCOME
}
